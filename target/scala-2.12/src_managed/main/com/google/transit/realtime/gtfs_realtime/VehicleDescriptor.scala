// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.transit.realtime.gtfs_realtime

/** Identification information for the vehicle performing the trip.
  *
  * @param id
  *   Internal system identification of the vehicle. Should be unique per
  *   vehicle, and can be used for tracking the vehicle as it proceeds through
  *   the system.
  * @param label
  *   User visible label, i.e., something that must be shown to the passenger to
  *   help identify the correct vehicle.
  * @param licensePlate
  *   The license plate of the vehicle.
  */
@SerialVersionUID(0L)
final case class VehicleDescriptor(
    id: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    label: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    licensePlate: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet()
    ) extends scalapb.GeneratedMessage with scalapb.Message[VehicleDescriptor] with scalapb.lenses.Updatable[VehicleDescriptor] with _root_.scalapb.ExtendableMessage[VehicleDescriptor] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) {
        val __value = id.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (label.isDefined) {
        val __value = label.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (licensePlate.isDefined) {
        val __value = licensePlate.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      label.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      licensePlate.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.transit.realtime.gtfs_realtime.VehicleDescriptor = {
      var __id = this.id
      var __label = this.label
      var __licensePlate = this.licensePlate
      val _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(this.unknownFields)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = Option(_input__.readString())
          case 18 =>
            __label = Option(_input__.readString())
          case 26 =>
            __licensePlate = Option(_input__.readString())
          case tag => _unknownFields__.parseField(tag, _input__)
        }
      }
      com.google.transit.realtime.gtfs_realtime.VehicleDescriptor(
          id = __id,
          label = __label,
          licensePlate = __licensePlate,
          unknownFields = _unknownFields__.result()
      )
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: VehicleDescriptor = copy(id = _root_.scala.None)
    def withId(__v: _root_.scala.Predef.String): VehicleDescriptor = copy(id = Option(__v))
    def getLabel: _root_.scala.Predef.String = label.getOrElse("")
    def clearLabel: VehicleDescriptor = copy(label = _root_.scala.None)
    def withLabel(__v: _root_.scala.Predef.String): VehicleDescriptor = copy(label = Option(__v))
    def getLicensePlate: _root_.scala.Predef.String = licensePlate.getOrElse("")
    def clearLicensePlate: VehicleDescriptor = copy(licensePlate = _root_.scala.None)
    def withLicensePlate(__v: _root_.scala.Predef.String): VehicleDescriptor = copy(licensePlate = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id.orNull
        case 2 => label.orNull
        case 3 => licensePlate.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => label.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => licensePlate.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.transit.realtime.gtfs_realtime.VehicleDescriptor
}

object VehicleDescriptor extends scalapb.GeneratedMessageCompanion[com.google.transit.realtime.gtfs_realtime.VehicleDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.transit.realtime.gtfs_realtime.VehicleDescriptor] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.transit.realtime.gtfs_realtime.VehicleDescriptor = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.transit.realtime.gtfs_realtime.VehicleDescriptor(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.transit.realtime.gtfs_realtime.VehicleDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.transit.realtime.gtfs_realtime.VehicleDescriptor(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GtfsRealtimeProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GtfsRealtimeProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.transit.realtime.gtfs_realtime.VehicleDescriptor(
  )
  implicit class VehicleDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.transit.realtime.gtfs_realtime.VehicleDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.transit.realtime.gtfs_realtime.VehicleDescriptor](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def label: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLabel)((c_, f_) => c_.copy(label = Option(f_)))
    def optionalLabel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.label)((c_, f_) => c_.copy(label = f_))
    def licensePlate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLicensePlate)((c_, f_) => c_.copy(licensePlate = Option(f_)))
    def optionalLicensePlate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.licensePlate)((c_, f_) => c_.copy(licensePlate = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val LABEL_FIELD_NUMBER = 2
  final val LICENSE_PLATE_FIELD_NUMBER = 3
  def of(
    id: _root_.scala.Option[_root_.scala.Predef.String],
    label: _root_.scala.Option[_root_.scala.Predef.String],
    licensePlate: _root_.scala.Option[_root_.scala.Predef.String],
    unknownFields: _root_.scalapb.UnknownFieldSet
  ): _root_.com.google.transit.realtime.gtfs_realtime.VehicleDescriptor = _root_.com.google.transit.realtime.gtfs_realtime.VehicleDescriptor(
    id,
    label,
    licensePlate,
    unknownFields
  )
}
