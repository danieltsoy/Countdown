// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.transit.realtime.gtfs_realtime

/** A descriptor that identifies an instance of a GTFS trip, or all instances of
  * a trip along a route.
  * - To specify a single trip instance, the trip_id (and if necessary,
  *   start_time) is set. If route_id is also set, then it should be same as one
  *   that the given trip corresponds to.
  * - To specify all the trips along a given route, only the route_id should be
  *   set. Note that if the trip_id is not known, then stop sequence ids in
  *   TripUpdate are not sufficient, and stop_ids must be provided as well. In
  *   addition, absolute arrival/departure times must be provided.
  *
  * @param tripId
  *   The trip_id from the GTFS feed that this selector refers to.
  *   For non frequency-based trips, this field is enough to uniquely identify
  *   the trip. For frequency-based trip, start_time and start_date might also be
  *   necessary.
  * @param routeId
  *   The route_id from the GTFS that this selector refers to.
  * @param directionId
  *   The direction_id from the GTFS feed trips.txt file, indicating the
  *   direction of travel for trips this selector refers to. This field is
  *   still experimental, and subject to change. It may be formally adopted in
  *   the future.
  * @param startTime
  *   The initially scheduled start time of this trip instance.
  *   When the trip_id corresponds to a non-frequency-based trip, this field
  *   should either be omitted or be equal to the value in the GTFS feed. When
  *   the trip_id corresponds to a frequency-based trip, the start_time must be
  *   specified for trip updates and vehicle positions. If the trip corresponds
  *   to exact_times=1 GTFS record, then start_time must be some multiple
  *   (including zero) of headway_secs later than frequencies.txt start_time for
  *   the corresponding time period. If the trip corresponds to exact_times=0,
  *   then its start_time may be arbitrary, and is initially expected to be the
  *   first departure of the trip. Once established, the start_time of this
  *   frequency-based trip should be considered immutable, even if the first
  *   departure time changes -- that time change may instead be reflected in a
  *   StopTimeUpdate.
  *   Format and semantics of the field is same as that of
  *   GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.
  * @param startDate
  *   The scheduled start date of this trip instance.
  *   Must be provided to disambiguate trips that are so late as to collide with
  *   a scheduled trip on a next day. For example, for a train that departs 8:00
  *   and 20:00 every day, and is 12 hours late, there would be two distinct
  *   trips on the same time.
  *   This field can be provided but is not mandatory for schedules in which such
  *   collisions are impossible - for example, a service running on hourly
  *   schedule where a vehicle that is one hour late is not considered to be
  *   related to schedule anymore.
  *   In YYYYMMDD format.
  */
@SerialVersionUID(0L)
final case class TripDescriptor(
    tripId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    routeId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    directionId: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    startTime: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    startDate: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    scheduleRelationship: _root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet()
    ) extends scalapb.GeneratedMessage with scalapb.Message[TripDescriptor] with scalapb.lenses.Updatable[TripDescriptor] with _root_.scalapb.ExtendableMessage[TripDescriptor] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (tripId.isDefined) {
        val __value = tripId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (routeId.isDefined) {
        val __value = routeId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      if (directionId.isDefined) {
        val __value = directionId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, __value)
      };
      if (startTime.isDefined) {
        val __value = startTime.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (startDate.isDefined) {
        val __value = startDate.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (scheduleRelationship.isDefined) {
        val __value = scheduleRelationship.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value.value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      tripId.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      startTime.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      startDate.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      scheduleRelationship.foreach { __v =>
        val __m = __v
        _output__.writeEnum(4, __m.value)
      };
      routeId.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      directionId.foreach { __v =>
        val __m = __v
        _output__.writeUInt32(6, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.transit.realtime.gtfs_realtime.TripDescriptor = {
      var __tripId = this.tripId
      var __routeId = this.routeId
      var __directionId = this.directionId
      var __startTime = this.startTime
      var __startDate = this.startDate
      var __scheduleRelationship = this.scheduleRelationship
      val _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(this.unknownFields)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __tripId = Option(_input__.readString())
          case 42 =>
            __routeId = Option(_input__.readString())
          case 48 =>
            __directionId = Option(_input__.readUInt32())
          case 18 =>
            __startTime = Option(_input__.readString())
          case 26 =>
            __startDate = Option(_input__.readString())
          case 32 =>
            __scheduleRelationship = Option(com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship.fromValue(_input__.readEnum()))
          case tag => _unknownFields__.parseField(tag, _input__)
        }
      }
      com.google.transit.realtime.gtfs_realtime.TripDescriptor(
          tripId = __tripId,
          routeId = __routeId,
          directionId = __directionId,
          startTime = __startTime,
          startDate = __startDate,
          scheduleRelationship = __scheduleRelationship,
          unknownFields = _unknownFields__.result()
      )
    }
    def getTripId: _root_.scala.Predef.String = tripId.getOrElse("")
    def clearTripId: TripDescriptor = copy(tripId = _root_.scala.None)
    def withTripId(__v: _root_.scala.Predef.String): TripDescriptor = copy(tripId = Option(__v))
    def getRouteId: _root_.scala.Predef.String = routeId.getOrElse("")
    def clearRouteId: TripDescriptor = copy(routeId = _root_.scala.None)
    def withRouteId(__v: _root_.scala.Predef.String): TripDescriptor = copy(routeId = Option(__v))
    def getDirectionId: _root_.scala.Int = directionId.getOrElse(0)
    def clearDirectionId: TripDescriptor = copy(directionId = _root_.scala.None)
    def withDirectionId(__v: _root_.scala.Int): TripDescriptor = copy(directionId = Option(__v))
    def getStartTime: _root_.scala.Predef.String = startTime.getOrElse("")
    def clearStartTime: TripDescriptor = copy(startTime = _root_.scala.None)
    def withStartTime(__v: _root_.scala.Predef.String): TripDescriptor = copy(startTime = Option(__v))
    def getStartDate: _root_.scala.Predef.String = startDate.getOrElse("")
    def clearStartDate: TripDescriptor = copy(startDate = _root_.scala.None)
    def withStartDate(__v: _root_.scala.Predef.String): TripDescriptor = copy(startDate = Option(__v))
    def getScheduleRelationship: com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship = scheduleRelationship.getOrElse(com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship.SCHEDULED)
    def clearScheduleRelationship: TripDescriptor = copy(scheduleRelationship = _root_.scala.None)
    def withScheduleRelationship(__v: com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship): TripDescriptor = copy(scheduleRelationship = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => tripId.orNull
        case 5 => routeId.orNull
        case 6 => directionId.orNull
        case 2 => startTime.orNull
        case 3 => startDate.orNull
        case 4 => scheduleRelationship.map(_.javaValueDescriptor).orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => tripId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => routeId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => directionId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => startTime.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => startDate.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => scheduleRelationship.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.transit.realtime.gtfs_realtime.TripDescriptor
}

object TripDescriptor extends scalapb.GeneratedMessageCompanion[com.google.transit.realtime.gtfs_realtime.TripDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.transit.realtime.gtfs_realtime.TripDescriptor] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.transit.realtime.gtfs_realtime.TripDescriptor = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.transit.realtime.gtfs_realtime.TripDescriptor(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[_root_.scala.Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship.fromValue(__e.getNumber))
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.transit.realtime.gtfs_realtime.TripDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.transit.realtime.gtfs_realtime.TripDescriptor(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship.fromValue(__e.number))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GtfsRealtimeProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GtfsRealtimeProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship
    }
  }
  lazy val defaultInstance = com.google.transit.realtime.gtfs_realtime.TripDescriptor(
  )
  /** The relation between this trip and the static schedule. If a trip is done
    * in accordance with temporary schedule, not reflected in GTFS, then it
    * shouldn't be marked as SCHEDULED, but likely as ADDED.
    */
  sealed trait ScheduleRelationship extends _root_.scalapb.GeneratedEnum {
    type EnumType = ScheduleRelationship
    def isScheduled: _root_.scala.Boolean = false
    def isAdded: _root_.scala.Boolean = false
    def isUnscheduled: _root_.scala.Boolean = false
    def isCanceled: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[ScheduleRelationship] = com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship
  }
  
  object ScheduleRelationship extends _root_.scalapb.GeneratedEnumCompanion[ScheduleRelationship] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[ScheduleRelationship] = this
    /** Trip that is running in accordance with its GTFS schedule, or is close
      * enough to the scheduled trip to be associated with it.
      */
    @SerialVersionUID(0L)
    case object SCHEDULED extends ScheduleRelationship {
      val value = 0
      val index = 0
      val name = "SCHEDULED"
      override def isScheduled: _root_.scala.Boolean = true
    }
    
    /** An extra trip that was added in addition to a running schedule, for
      * example, to replace a broken vehicle or to respond to sudden passenger
      * load.
      */
    @SerialVersionUID(0L)
    case object ADDED extends ScheduleRelationship {
      val value = 1
      val index = 1
      val name = "ADDED"
      override def isAdded: _root_.scala.Boolean = true
    }
    
    /** A trip that is running with no schedule associated to it, for example, if
      * there is no schedule at all.
      */
    @SerialVersionUID(0L)
    case object UNSCHEDULED extends ScheduleRelationship {
      val value = 2
      val index = 2
      val name = "UNSCHEDULED"
      override def isUnscheduled: _root_.scala.Boolean = true
    }
    
    /** A trip that existed in the schedule but was removed.
      */
    @SerialVersionUID(0L)
    case object CANCELED extends ScheduleRelationship {
      val value = 3
      val index = 3
      val name = "CANCELED"
      override def isCanceled: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends ScheduleRelationship with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(SCHEDULED, ADDED, UNSCHEDULED, CANCELED)
    def fromValue(value: _root_.scala.Int): ScheduleRelationship = value match {
      case 0 => SCHEDULED
      case 1 => ADDED
      case 2 => UNSCHEDULED
      case 3 => CANCELED
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.google.transit.realtime.gtfs_realtime.TripDescriptor.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.google.transit.realtime.gtfs_realtime.TripDescriptor.scalaDescriptor.enums(0)
  }
  implicit class TripDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.transit.realtime.gtfs_realtime.TripDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.transit.realtime.gtfs_realtime.TripDescriptor](_l) {
    def tripId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTripId)((c_, f_) => c_.copy(tripId = Option(f_)))
    def optionalTripId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.tripId)((c_, f_) => c_.copy(tripId = f_))
    def routeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRouteId)((c_, f_) => c_.copy(routeId = Option(f_)))
    def optionalRouteId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.routeId)((c_, f_) => c_.copy(routeId = f_))
    def directionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getDirectionId)((c_, f_) => c_.copy(directionId = Option(f_)))
    def optionalDirectionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.directionId)((c_, f_) => c_.copy(directionId = f_))
    def startTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStartTime)((c_, f_) => c_.copy(startTime = Option(f_)))
    def optionalStartTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
    def startDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStartDate)((c_, f_) => c_.copy(startDate = Option(f_)))
    def optionalStartDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.startDate)((c_, f_) => c_.copy(startDate = f_))
    def scheduleRelationship: _root_.scalapb.lenses.Lens[UpperPB, com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship] = field(_.getScheduleRelationship)((c_, f_) => c_.copy(scheduleRelationship = Option(f_)))
    def optionalScheduleRelationship: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship]] = field(_.scheduleRelationship)((c_, f_) => c_.copy(scheduleRelationship = f_))
  }
  final val TRIP_ID_FIELD_NUMBER = 1
  final val ROUTE_ID_FIELD_NUMBER = 5
  final val DIRECTION_ID_FIELD_NUMBER = 6
  final val START_TIME_FIELD_NUMBER = 2
  final val START_DATE_FIELD_NUMBER = 3
  final val SCHEDULE_RELATIONSHIP_FIELD_NUMBER = 4
  def of(
    tripId: _root_.scala.Option[_root_.scala.Predef.String],
    routeId: _root_.scala.Option[_root_.scala.Predef.String],
    directionId: _root_.scala.Option[_root_.scala.Int],
    startTime: _root_.scala.Option[_root_.scala.Predef.String],
    startDate: _root_.scala.Option[_root_.scala.Predef.String],
    scheduleRelationship: _root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TripDescriptor.ScheduleRelationship],
    unknownFields: _root_.scalapb.UnknownFieldSet
  ): _root_.com.google.transit.realtime.gtfs_realtime.TripDescriptor = _root_.com.google.transit.realtime.gtfs_realtime.TripDescriptor(
    tripId,
    routeId,
    directionId,
    startTime,
    startDate,
    scheduleRelationship,
    unknownFields
  )
}
