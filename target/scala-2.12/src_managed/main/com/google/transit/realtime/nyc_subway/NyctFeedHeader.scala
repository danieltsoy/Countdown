// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.transit.realtime.nyc_subway

/** NYCT Subway extensions for the feed header
  *
  * @param nyctSubwayVersion
  *   Version of the NYCT Subway extensions
  *   The current version is 1.0
  * @param tripReplacementPeriod
  *   For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
  *   trip within the trip_replacement_period. 
  *   This feed is a full dataset, it contains all trips starting 
  *   in the trip_replacement_period. If a trip from the static GTFS is not
  *   found in the GTFS-realtime feed, it should be considered as cancelled.
  *   The replacement period can be different for each route, so here is 
  *   a list of the routes where the trips in the feed replace all 
  *   scheduled trips within the replacement period.
  */
@SerialVersionUID(0L)
final case class NyctFeedHeader(
    nyctSubwayVersion: _root_.scala.Predef.String,
    tripReplacementPeriod: _root_.scala.Seq[com.google.transit.realtime.nyc_subway.TripReplacementPeriod] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[NyctFeedHeader] with scalapb.lenses.Updatable[NyctFeedHeader] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = nyctSubwayVersion
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      tripReplacementPeriod.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = nyctSubwayVersion
        _output__.writeString(1, __v)
      };
      tripReplacementPeriod.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.transit.realtime.nyc_subway.NyctFeedHeader = {
      var __nyctSubwayVersion = this.nyctSubwayVersion
      val __tripReplacementPeriod = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.transit.realtime.nyc_subway.TripReplacementPeriod] ++= this.tripReplacementPeriod)
      var __requiredFields0: _root_.scala.Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __nyctSubwayVersion = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __tripReplacementPeriod += _root_.scalapb.LiteParser.readMessage(_input__, com.google.transit.realtime.nyc_subway.TripReplacementPeriod.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.google.transit.realtime.nyc_subway.NyctFeedHeader(
          nyctSubwayVersion = __nyctSubwayVersion,
          tripReplacementPeriod = __tripReplacementPeriod.result()
      )
    }
    def withNyctSubwayVersion(__v: _root_.scala.Predef.String): NyctFeedHeader = copy(nyctSubwayVersion = __v)
    def clearTripReplacementPeriod = copy(tripReplacementPeriod = _root_.scala.Seq.empty)
    def addTripReplacementPeriod(__vs: com.google.transit.realtime.nyc_subway.TripReplacementPeriod*): NyctFeedHeader = addAllTripReplacementPeriod(__vs)
    def addAllTripReplacementPeriod(__vs: Iterable[com.google.transit.realtime.nyc_subway.TripReplacementPeriod]): NyctFeedHeader = copy(tripReplacementPeriod = tripReplacementPeriod ++ __vs)
    def withTripReplacementPeriod(__v: _root_.scala.Seq[com.google.transit.realtime.nyc_subway.TripReplacementPeriod]): NyctFeedHeader = copy(tripReplacementPeriod = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => nyctSubwayVersion
        case 2 => tripReplacementPeriod
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(nyctSubwayVersion)
        case 2 => _root_.scalapb.descriptors.PRepeated(tripReplacementPeriod.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.transit.realtime.nyc_subway.NyctFeedHeader
}

object NyctFeedHeader extends scalapb.GeneratedMessageCompanion[com.google.transit.realtime.nyc_subway.NyctFeedHeader] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.transit.realtime.nyc_subway.NyctFeedHeader] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.transit.realtime.nyc_subway.NyctFeedHeader = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.transit.realtime.nyc_subway.NyctFeedHeader(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[com.google.transit.realtime.nyc_subway.TripReplacementPeriod]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.transit.realtime.nyc_subway.NyctFeedHeader] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.transit.realtime.nyc_subway.NyctFeedHeader(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Predef.String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[com.google.transit.realtime.nyc_subway.TripReplacementPeriod]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = NycSubwayProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = NycSubwayProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.transit.realtime.nyc_subway.TripReplacementPeriod
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.transit.realtime.nyc_subway.NyctFeedHeader(
    nyctSubwayVersion = ""
  )
  implicit class NyctFeedHeaderLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.transit.realtime.nyc_subway.NyctFeedHeader]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.transit.realtime.nyc_subway.NyctFeedHeader](_l) {
    def nyctSubwayVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.nyctSubwayVersion)((c_, f_) => c_.copy(nyctSubwayVersion = f_))
    def tripReplacementPeriod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.transit.realtime.nyc_subway.TripReplacementPeriod]] = field(_.tripReplacementPeriod)((c_, f_) => c_.copy(tripReplacementPeriod = f_))
  }
  final val NYCT_SUBWAY_VERSION_FIELD_NUMBER = 1
  final val TRIP_REPLACEMENT_PERIOD_FIELD_NUMBER = 2
  def of(
    nyctSubwayVersion: _root_.scala.Predef.String,
    tripReplacementPeriod: _root_.scala.Seq[com.google.transit.realtime.nyc_subway.TripReplacementPeriod]
  ): _root_.com.google.transit.realtime.nyc_subway.NyctFeedHeader = _root_.com.google.transit.realtime.nyc_subway.NyctFeedHeader(
    nyctSubwayVersion,
    tripReplacementPeriod
  )
}
