// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.transit.realtime.gtfs_realtime

/** A position.
  *
  * @param latitude
  *   Degrees North, in the WGS-84 coordinate system.
  * @param longitude
  *   Degrees East, in the WGS-84 coordinate system.
  * @param bearing
  *   Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
  *   This can be the compass bearing, or the direction towards the next stop
  *   or intermediate location.
  *   This should not be direction deduced from the sequence of previous
  *   positions, which can be computed from previous data.
  * @param odometer
  *   Odometer value, in meters.
  * @param speed
  *   Momentary speed measured by the vehicle, in meters per second.
  */
@SerialVersionUID(0L)
final case class Position(
    latitude: _root_.scala.Float,
    longitude: _root_.scala.Float,
    bearing: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None,
    odometer: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
    speed: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet()
    ) extends scalapb.GeneratedMessage with scalapb.Message[Position] with scalapb.lenses.Updatable[Position] with _root_.scalapb.ExtendableMessage[Position] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = latitude
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(1, __value)
      };
      
      {
        val __value = longitude
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(2, __value)
      };
      if (bearing.isDefined) {
        val __value = bearing.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, __value)
      };
      if (odometer.isDefined) {
        val __value = odometer.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, __value)
      };
      if (speed.isDefined) {
        val __value = speed.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(5, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = latitude
        _output__.writeFloat(1, __v)
      };
      
      {
        val __v = longitude
        _output__.writeFloat(2, __v)
      };
      bearing.foreach { __v =>
        val __m = __v
        _output__.writeFloat(3, __m)
      };
      odometer.foreach { __v =>
        val __m = __v
        _output__.writeDouble(4, __m)
      };
      speed.foreach { __v =>
        val __m = __v
        _output__.writeFloat(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.transit.realtime.gtfs_realtime.Position = {
      var __latitude = this.latitude
      var __longitude = this.longitude
      var __bearing = this.bearing
      var __odometer = this.odometer
      var __speed = this.speed
      val _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(this.unknownFields)
      var __requiredFields0: _root_.scala.Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 13 =>
            __latitude = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 21 =>
            __longitude = _input__.readFloat()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 29 =>
            __bearing = Option(_input__.readFloat())
          case 33 =>
            __odometer = Option(_input__.readDouble())
          case 45 =>
            __speed = Option(_input__.readFloat())
          case tag => _unknownFields__.parseField(tag, _input__)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.google.transit.realtime.gtfs_realtime.Position(
          latitude = __latitude,
          longitude = __longitude,
          bearing = __bearing,
          odometer = __odometer,
          speed = __speed,
          unknownFields = _unknownFields__.result()
      )
    }
    def withLatitude(__v: _root_.scala.Float): Position = copy(latitude = __v)
    def withLongitude(__v: _root_.scala.Float): Position = copy(longitude = __v)
    def getBearing: _root_.scala.Float = bearing.getOrElse(0.0f)
    def clearBearing: Position = copy(bearing = _root_.scala.None)
    def withBearing(__v: _root_.scala.Float): Position = copy(bearing = Option(__v))
    def getOdometer: _root_.scala.Double = odometer.getOrElse(0.0)
    def clearOdometer: Position = copy(odometer = _root_.scala.None)
    def withOdometer(__v: _root_.scala.Double): Position = copy(odometer = Option(__v))
    def getSpeed: _root_.scala.Float = speed.getOrElse(0.0f)
    def clearSpeed: Position = copy(speed = _root_.scala.None)
    def withSpeed(__v: _root_.scala.Float): Position = copy(speed = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => latitude
        case 2 => longitude
        case 3 => bearing.orNull
        case 4 => odometer.orNull
        case 5 => speed.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PFloat(latitude)
        case 2 => _root_.scalapb.descriptors.PFloat(longitude)
        case 3 => bearing.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => odometer.map(_root_.scalapb.descriptors.PDouble).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => speed.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.transit.realtime.gtfs_realtime.Position
}

object Position extends scalapb.GeneratedMessageCompanion[com.google.transit.realtime.gtfs_realtime.Position] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.transit.realtime.gtfs_realtime.Position] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.transit.realtime.gtfs_realtime.Position = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.transit.realtime.gtfs_realtime.Position(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Float],
      __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Float],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[_root_.scala.Float]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[_root_.scala.Double]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[_root_.scala.Float]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.transit.realtime.gtfs_realtime.Position] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.transit.realtime.gtfs_realtime.Position(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Float],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Float],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GtfsRealtimeProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GtfsRealtimeProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.transit.realtime.gtfs_realtime.Position(
    latitude = 0.0f,
    longitude = 0.0f
  )
  implicit class PositionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.transit.realtime.gtfs_realtime.Position]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.transit.realtime.gtfs_realtime.Position](_l) {
    def latitude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.latitude)((c_, f_) => c_.copy(latitude = f_))
    def longitude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.longitude)((c_, f_) => c_.copy(longitude = f_))
    def bearing: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getBearing)((c_, f_) => c_.copy(bearing = Option(f_)))
    def optionalBearing: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Float]] = field(_.bearing)((c_, f_) => c_.copy(bearing = f_))
    def odometer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getOdometer)((c_, f_) => c_.copy(odometer = Option(f_)))
    def optionalOdometer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.odometer)((c_, f_) => c_.copy(odometer = f_))
    def speed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getSpeed)((c_, f_) => c_.copy(speed = Option(f_)))
    def optionalSpeed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Float]] = field(_.speed)((c_, f_) => c_.copy(speed = f_))
  }
  final val LATITUDE_FIELD_NUMBER = 1
  final val LONGITUDE_FIELD_NUMBER = 2
  final val BEARING_FIELD_NUMBER = 3
  final val ODOMETER_FIELD_NUMBER = 4
  final val SPEED_FIELD_NUMBER = 5
  def of(
    latitude: _root_.scala.Float,
    longitude: _root_.scala.Float,
    bearing: _root_.scala.Option[_root_.scala.Float],
    odometer: _root_.scala.Option[_root_.scala.Double],
    speed: _root_.scala.Option[_root_.scala.Float],
    unknownFields: _root_.scalapb.UnknownFieldSet
  ): _root_.com.google.transit.realtime.gtfs_realtime.Position = _root_.com.google.transit.realtime.gtfs_realtime.Position(
    latitude,
    longitude,
    bearing,
    odometer,
    speed,
    unknownFields
  )
}
