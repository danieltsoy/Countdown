// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.transit.realtime.nyc_subway

/** @param routeId
  *   The replacement period is for this route
  * @param replacementPeriod
  *   The start time is omitted, the end time is currently now + 30 minutes for
  *   all routes of the A division
  */
@SerialVersionUID(0L)
final case class TripReplacementPeriod(
    routeId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    replacementPeriod: _root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TimeRange] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[TripReplacementPeriod] with scalapb.lenses.Updatable[TripReplacementPeriod] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (routeId.isDefined) {
        val __value = routeId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (replacementPeriod.isDefined) {
        val __value = replacementPeriod.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      routeId.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      replacementPeriod.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.transit.realtime.nyc_subway.TripReplacementPeriod = {
      var __routeId = this.routeId
      var __replacementPeriod = this.replacementPeriod
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __routeId = Option(_input__.readString())
          case 18 =>
            __replacementPeriod = Option(_root_.scalapb.LiteParser.readMessage(_input__, __replacementPeriod.getOrElse(com.google.transit.realtime.gtfs_realtime.TimeRange.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.google.transit.realtime.nyc_subway.TripReplacementPeriod(
          routeId = __routeId,
          replacementPeriod = __replacementPeriod
      )
    }
    def getRouteId: _root_.scala.Predef.String = routeId.getOrElse("")
    def clearRouteId: TripReplacementPeriod = copy(routeId = _root_.scala.None)
    def withRouteId(__v: _root_.scala.Predef.String): TripReplacementPeriod = copy(routeId = Option(__v))
    def getReplacementPeriod: com.google.transit.realtime.gtfs_realtime.TimeRange = replacementPeriod.getOrElse(com.google.transit.realtime.gtfs_realtime.TimeRange.defaultInstance)
    def clearReplacementPeriod: TripReplacementPeriod = copy(replacementPeriod = _root_.scala.None)
    def withReplacementPeriod(__v: com.google.transit.realtime.gtfs_realtime.TimeRange): TripReplacementPeriod = copy(replacementPeriod = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => routeId.orNull
        case 2 => replacementPeriod.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => routeId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => replacementPeriod.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.transit.realtime.nyc_subway.TripReplacementPeriod
}

object TripReplacementPeriod extends scalapb.GeneratedMessageCompanion[com.google.transit.realtime.nyc_subway.TripReplacementPeriod] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.transit.realtime.nyc_subway.TripReplacementPeriod] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.transit.realtime.nyc_subway.TripReplacementPeriod = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.transit.realtime.nyc_subway.TripReplacementPeriod(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TimeRange]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.transit.realtime.nyc_subway.TripReplacementPeriod] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.transit.realtime.nyc_subway.TripReplacementPeriod(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TimeRange]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = NycSubwayProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = NycSubwayProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.transit.realtime.gtfs_realtime.TimeRange
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.transit.realtime.nyc_subway.TripReplacementPeriod(
  )
  implicit class TripReplacementPeriodLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.transit.realtime.nyc_subway.TripReplacementPeriod]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.transit.realtime.nyc_subway.TripReplacementPeriod](_l) {
    def routeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRouteId)((c_, f_) => c_.copy(routeId = Option(f_)))
    def optionalRouteId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.routeId)((c_, f_) => c_.copy(routeId = f_))
    def replacementPeriod: _root_.scalapb.lenses.Lens[UpperPB, com.google.transit.realtime.gtfs_realtime.TimeRange] = field(_.getReplacementPeriod)((c_, f_) => c_.copy(replacementPeriod = Option(f_)))
    def optionalReplacementPeriod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TimeRange]] = field(_.replacementPeriod)((c_, f_) => c_.copy(replacementPeriod = f_))
  }
  final val ROUTE_ID_FIELD_NUMBER = 1
  final val REPLACEMENT_PERIOD_FIELD_NUMBER = 2
  def of(
    routeId: _root_.scala.Option[_root_.scala.Predef.String],
    replacementPeriod: _root_.scala.Option[com.google.transit.realtime.gtfs_realtime.TimeRange]
  ): _root_.com.google.transit.realtime.nyc_subway.TripReplacementPeriod = _root_.com.google.transit.realtime.nyc_subway.TripReplacementPeriod(
    routeId,
    replacementPeriod
  )
}
